use iced_xml_core::IcedComponent;
use iced_xml_derive::Component;
fn main() -> iced::Result {
    iced::run("Counter", Counter::update, Counter::view)
}

#[derive(Default, Component)]
#[source = "counter.ixml"]
struct Counter {
    value: i64,
}

#[derive(Debug, Clone, Copy)]
enum Message {
    Increment,
    Decrement,
}

impl Counter {
    fn update(&mut self, message: Message) {
        match message {
            Message::Increment => {
                self.value += 1;
            }
            Message::Decrement => {
                self.value -= 1;
            }
        }
    }
}

// TODO: This should be generated by a derive macro!
impl iced_xml_core::IcedComponent for Counter {
    type Message = Message;

    fn view(&self) -> iced::Element<'_, Self::Message> {
        use iced::Alignment::Center;
        use iced::widget::{button, column, text};
        column![
            button("Increment").on_press(Message::Increment),
            text(self.value).size(50),
            button("Decrement").on_press(Message::Decrement)
        ]
        .padding(20)
        .align_x(Center)
        .into()
    }
}
